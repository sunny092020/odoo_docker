#!/bin/bash
#
# This script is designed to be run inside the container

log_src='['${0##*/}']'

function help {
    cat /usr/share/man/help.txt
}

function man {
    cat /usr/share/man/man.txt
}

function _ensure_odoo_user_owns_volume {
    # Make sure the folder exists
    if [ -d "$1" ]; then
        # Check if the volume has been mounted read-only
        mount_type=$( cat /proc/mounts | grep "\s$1\s" | \
            awk '{print tolower(substr($4,0,3))}' )

        if [ "$mount_type" != 'ro' ]; then
            # Set target user as owner
            chown "$odoo_user":"$odoo_user" "$1"
        else
            echo $log_src[`date +%F.%H:%M:%S`]' Read-only volume:' "$1"
        fi
    fi
}

function _ensure_odoo_user_owns_volumes {
    _ensure_odoo_user_owns_volume /opt/odoo/etc
    _ensure_odoo_user_owns_volume /opt/odoo/additional_addons
    _ensure_odoo_user_owns_volume /opt/odoo/data
    _ensure_odoo_user_owns_volume /opt/odoo/data/filestore
    _ensure_odoo_user_owns_volume /opt/odoo/data/sessions
    _ensure_odoo_user_owns_volume /opt/odoo/data/addons
    _ensure_odoo_user_owns_volume /opt/odoo/ssh
}

function _update_odoo_param {
    # Check if the conf already contains that parameter
    grep -q "^$1\s*=" "$odoo_conf_file"
    found="$?"

    if [ "$found" -eq 0 ]; then
        # Substitute the value
        sudo -i -u "$odoo_user" sed -i \
            "s/^$1\s*=.*/$1 = $2/g" "$odoo_conf_file"
    else
        # Append the parameter (hide tee output to stdout)
        echo "$1 = $2" | \
            sudo -i -u "$odoo_user" tee -a "$odoo_conf_file" > /dev/null
    fi
}

function _update_odoo_conf_params {
    # Loop over all the "ODOO_" ENV variables (see `<<<` after `done`)
    while read -r env_var; do
        # Remove "ODOO_" from ENV variable and convert to lowercase
        odoo_param=${env_var:5}
        odoo_param=${odoo_param,,}

        # Get the value of the corresponding ENV variable and escape slashes
        val=${!env_var}
        val=$( echo "$val" | sed 's/\//\\\//g' )

        _update_odoo_param "$odoo_param" "$val"

        # Unset the environment variable for security purpose
        unset "$env_var"
    done <<< "$( printenv | grep '^ODOO_' | sed 's/=.*//g' )"
}

function _setup_ssh_key {
    # SSH config folder in $HOME folder of target user
    ssh_folder=$( getent passwd "$odoo_user" | cut -d: -f6 )/.ssh

    # SSH config folder already exists when container has been restarted
    if [ ! -d "$ssh_folder" ]; then
        # Create SSH config folder
        sudo -i -u "$odoo_user" mkdir "$ssh_folder"

        # Copy SSH private key from /opt/odoo/ssh
        sudo -i -u "$odoo_user" cp /opt/odoo/ssh/id_rsa "$ssh_folder"

        echo $log_src[`date +%F.%H:%M:%S`]' Scanning GitHub key...'
        # Hide ssh-keyscan stderr output since it's actually log message
        ssh-keyscan github.com 2> /dev/null | \
            sudo -i -u "$odoo_user" tee "$ssh_folder/known_hosts" > /dev/null

        # Bind SSH key to GitHub host
        echo "host github.com
                HostName github.com
                User git
                IdentityFile $ssh_folder/id_rsa" | \
            sudo -i -u "$odoo_user" tee "$ssh_folder/config" > /dev/null

        # Secure SSH key
        chmod 400 "$ssh_folder/id_rsa"
    fi
}

function _download_addons {
    # 2 reasons to download extra addons:
    #  1) ENV variable ADDONS_REPO is defined
    #  2) There's a file called `oca_dependencies.txt` at the root of extra addons folder
    if [ "$ADDONS_REPO" -o -f /opt/odoo/additional_addons/oca_dependencies.txt ]; then
        # Git config for target user
        sudo -i -u "$odoo_user" git config --global user.email "webmaster@elico-corp.com"
        sudo -i -u "$odoo_user" git config --global user.name "Elico Corp - Odoo Docker"

        # Setup SSH key
        if [ -f /opt/odoo/ssh/id_rsa ]; then
            _setup_ssh_key
        fi

        # Fetch dependencies by default
        if [[ -z "$FETCH_OCA_DEPENDENCIES" ]]; then
            FETCH_OCA_DEPENDENCIES=True
        fi

        echo $log_src[`date +%F.%H:%M:%S`]' Downloading additional addons...'
        sudo -i -u "$odoo_user" python /opt/odoo/auto_addons/addons.py \
            "$FETCH_OCA_DEPENDENCIES" "$ADDONS_REPO"
    else
        # No additional addons to download
        grep -q '^addons_path\s*=' "$odoo_conf_file"
        found="$?"

        if [ "$found" -ne 0 ]; then
            # Set addons path if it doesn't exist
            echo 'addons_path = /opt/odoo/sources/odoo/addons' | \
                sudo -i -u "$odoo_user" tee -a "$odoo_conf_file" > /dev/null
        fi
    fi
}

function _host_user_mapping {
    # Name of the target Odoo user
    TARGET_USER_NAME='target-odoo-user'

    # Check whether target user exists or not
    exists=$( getent passwd "$TARGET_UID" | wc -l )

    # Create target user
    if [ "$exists" == "0" ]; then
        # Odoo user is now the target Odoo user
        odoo_user="$TARGET_USER_NAME"

        echo $log_src[`date +%F.%H:%M:%S`]' Creating target Odoo user...'
        adduser --uid "$TARGET_UID" --disabled-login --gecos "" --quiet \
            "$odoo_user"

        # Add target user to odoo group so that he can read/write the content
        # of /opt/odoo
        usermod -a -G odoo "$odoo_user"
    else
        # Check whether trying to map with the same UID as `odoo` user
        odoo_user_id=$( id -u "$odoo_user" )

        if [ "$TARGET_UID" -ne "$odoo_user_id" ]; then

            # Check whether trying to map with an existing user other than the
            # target user
            target_uid_name=$( getent passwd "$TARGET_UID" | cut -d: -f1 )

            if [ "$TARGET_USER_NAME" != "$target_uid_name" ]; then
                echo $log_src[`date +%F.%H:%M:%S`]' ERROR: Cannot create' \
                    'target user as target UID already exists.'
            else
                # Target user has already been created (e.g. container has
                # been restarted)
                odoo_user="$TARGET_USER_NAME"
            fi
        fi
    fi
}

function start {
    # Host user mapping
    odoo_user='odoo'
    if [ "$TARGET_UID" ]; then
        _host_user_mapping
    fi

    # If the folders mapped to the volumes didn't exist, Docker has created
    # them with root instead of the target user. Making sure to give back the
    # ownership to the corresponding host user.
    _ensure_odoo_user_owns_volumes

    echo $log_src[`date +%F.%H:%M:%S`]' Checking special requirements...'
    bash /opt/scripts/startup.sh

    echo $log_src[`date +%F.%H:%M:%S`]' Updating Odoo conf...'
    odoo_conf_file="/opt/odoo/etc/odoo.conf"
    _update_odoo_conf_params

    # Check if need to download addons repo
    _download_addons

    echo $log_src[`date +%F.%H:%M:%S`]' Running odoo...'
    if [ ! -e $1 ]; then
        echo $log_src[`date +%F.%H:%M:%S`]' ...with additional args:' $*
    fi
    sudo -i -u "$odoo_user" "$PYTHON_BIN" \
        "/opt/odoo/sources/odoo/$SERVICE_BIN" -c "$odoo_conf_file" $*
}

# Run command
$*

